[package]
name = "aws-mls"
version = "0.30.0"
authors = ["Tom Leavy <tom@wickr.com>"]
edition = "2021"

[features]
default = ["std", "rayon", "rfc_compliant", "tree_index", "fast_serialize"]
benchmark = ["std", "aws-mls-crypto-openssl", "aws-mls-core/benchmark", "rfc_compliant"]
arbitrary = ["std", "dep:arbitrary", "aws-mls-core/arbitrary"]
rayon = ["std", "dep:rayon"]
external_client = ["std"]
grease = ["std"]
fast_serialize = ["aws-mls-core/fast_serialize"]
secret_tree_access = []
external_commit = ["aws-mls-core/external_commit"]
state_update = []
private_message = []
custom_proposal = []
tree_index = []
out_of_order = ["private_message"]
prior_epoch = []
by_ref_proposal = []
all_extensions = []
external_proposal = ["aws-mls-core/external_proposal", "aws-mls-identity-x509?/external_proposal", "by_ref_proposal"]
psk = []
x509 = ["aws-mls-core/x509", "dep:aws-mls-identity-x509"]
rfc_compliant = ["external_commit", "state_update", "private_message", "all_extensions", "custom_proposal", "external_proposal", "out_of_order", "psk", "x509", "prior_epoch", "by_ref_proposal"]

std = ["aws-mls-core/std", "aws-mls-codec/std", "aws-mls-identity-x509?/std", "hex/std", "futures/std", "itertools/use_std", "zeroize/std", "dep:debug_tree", "dep:thiserror"]

ffi = ["dep:safer-ffi", "dep:safer-ffi-gen", "aws-mls-core/ffi"]

# SQLite support
sqlite = ["std", "aws-mls-provider-sqlite/sqlite"]
sqlite-bundled = ["sqlite", "aws-mls-provider-sqlite/sqlite-bundled"]
sqlcipher = ["sqlite", "aws-mls-provider-sqlite/sqlcipher"]
sqlcipher-bundled = ["sqlite", "aws-mls-provider-sqlite/sqlcipher-bundled"]

test_utils = []

[dependencies]
aws-mls-core = { path = "../aws-mls-core", default-features = false, version = "*" }
aws-mls-identity-x509 = { path = "../aws-mls-identity-x509", default-features = false, version = "*", optional = true }
zeroize = { version = "1", default-features = false, features = ["alloc", "zeroize_derive"] }
aws-mls-codec = { version = "*", path = "../aws-mls-codec", default-features = false}
thiserror = { version = "1.0.40", optional = true }
futures = { version = "0.3.25", default-features = false, features = ["alloc"]}
itertools = { version = "0.10.3", default-features = false, features = ["use_alloc"]}
enum-iterator = "1.1.3"
cfg-if = "1"
async-trait = "0.1.61"
debug_tree = { version = "0.4.0", optional = true }
spin = { version = "0.9.8", default-features = false, features = ["mutex", "spin_mutex", "portable_atomic"]}
portable-atomic = { version = "*", default-features = false, features = ["critical-section"]}
portable-atomic-util = { version = "0.1.2", default-features = false, features = ["alloc"]}

# Optional dependencies
aws-mls-provider-sqlite = { path = "../aws-mls-provider-sqlite", version = "*", default-features = false, optional = true }
aws-mls-crypto-openssl = { path = "../aws-mls-crypto-openssl", optional = true, version = "*" }
# TODO: https://github.com/GoogleChromeLabs/wasm-bindgen-rayon
rayon = { version = "1", optional = true }
arbitrary = { version = "1", features = ["derive"], optional = true }
safer-ffi = { version = "0.1.0", default-features = false, optional = true }
safer-ffi-gen = { version = "0.5.0", default-features = false, optional = true }

# Example
tokio = { version = "1", optional = true, features = ["macros", "rt-multi-thread"] }
maybe-async = { version = "0.2.7" }

[dev-dependencies]
assert_matches = "1.5.0"
criterion = { version = "0.3.5", features = ["async_futures", "html_reports"] }
futures-test = "0.3.25"
serde_json = "^1.0"
rand = "0.8"
serde = { version = "1.0", default-features = false, features = ["alloc", "derive"] }
hex = { version = "^0.4.3", default-features = false, features = ["serde", "alloc"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { version = "^0.2.79" }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = { version = "0.3.26", default-features = false }
aws-mls-crypto-rustcrypto = { path = "../aws-mls-crypto-rustcrypto", features = ["browser"], version = "*" }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
aws-mls-crypto-openssl = { path = "../aws-mls-crypto-openssl", version = "*"}

[target.'cfg(sync)'.dependencies]
maybe-async = { version = "0.2.7", features = ["is_sync"] }

# Benchmarks
[target.'cfg(awslc)'.dependencies]
aws-mls-crypto-awslc = { path = "../aws-mls-crypto-awslc" }
[target.'cfg(rustcrypto)'.dependencies]
aws-mls-crypto-rustcrypto = { path = "../aws-mls-crypto-rustcrypto" }


[[example]]
name = "basic_usage"
required-features = ["tokio"]

[[example]]
name = "x509"
required-features = ["tokio", "x509"]

[[example]]
name = "large_group"
required-features = ["tokio"]

[[example]]
name = "basic_server_usage"
required-features = ["tokio", "external_client"]

[[bench]]
name = "encap"
harness = false
required-features = ["benchmark"]

[[bench]]
name = "decap"
harness = false
required-features = ["benchmark"]

[[bench]]
name = "group_serialize"
harness = false
required-features = ["benchmark"]

[[bench]]
name = "group_commit"
harness = false
required-features = ["benchmark"]

[[bench]]
name = "group_receive_commit"
harness = false
required-features = ["benchmark"]

[[bench]]
name = "group_application"
harness = false
required-features = ["benchmark"]

[[bench]]
name = "secret_tree_serialize"
harness = false
required-features = ["benchmark"]

[[test]]
name = "client_tests"
required-features = ["test_utils"]
